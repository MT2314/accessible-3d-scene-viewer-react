/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { A11y, useA11y } from '@react-three/a11y'

let labelHTML = `<Html distanceFactor={props.labelDistance}>
      <div
          className="content"
          tabIndex="-1"
      >
          {props.labelContent}
      </div>
  </Html>`



let gltf;
export default function Model(props) {
  gltf = props.gltfFile
  let meshArr = props.meshes
  const { nodes, materials } = useGLTF(props.gltfFile)
  const [clicked, setClicked] = useState(false)
  const meshRef = useRef()
  // Using this allows the focussed and hover state to be rendered visible
  const a11y = useA11y()

  return (
    <group {...props} dispose={null} scale={50}>
      {meshArr.map((mesh, index) => {
        return (
          <>
            <A11y
              key={index}
              role="togglebutton"
              startPressed={false}
              activationMsg={mesh.A11yMessage}
              deactivationMsg=""
              tabindex="-1"
            >
              <mesh
                key={`containerMesh` + index}
                geometry={nodes[mesh.geometry]["geometry"]}
                material={materials[mesh.material]}
                ref={meshRef}
                onClick={(e) => { setClicked(!clicked), console.log("donut clicked", clicked, meshRef) }}
              >
                {clicked || a11y.pressed && (
                  <Html distanceFactor={props.labelDistance}>
                    <div
                      className="content"
                      tabIndex="-1"
                    >
                      {props.labelContent}
                    </div>
                  </Html>
                )}

                {mesh.children ?
                  mesh.children.map((mesh, index) => {
                    return (
                      <A11y
                        key={index}
                        role="togglebutton"
                        startPressed={false}
                        activationMsg={mesh.A11yMessage}
                        deactivationMsg=""
                        tabindex="-1"
                      >
                        <mesh
                          key={`childMesh` + index}
                          geometry={nodes[mesh.geometry]["geometry"]}
                          material={materials[mesh.material]}
                          ref={meshRef}
                          onClick={(e) => { setClicked(!clicked), console.log("icing clicked", clicked, meshRef) }}
                        >
                          {clicked || a11y.pressed && (
                            <Html distanceFactor={props.labelDistance}>
                              <div
                                className="content"
                                tabIndex="-1"
                              >
                                {props.labelContent}
                              </div>
                            </Html>
                          )}
                        </mesh>
                      </A11y>
                    )
                  })
                  : console.log("no children ")}
              </mesh>
            </A11y>
          </>
        )
      })}
    </group > 
     )
}

useGLTF.preload(gltf)
