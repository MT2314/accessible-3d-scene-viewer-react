/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { A11y, useA11y } from '@react-three/a11y'
import { Html } from '@react-three/drei'
import ChildMesh from './ChildMesh'



let gltf;
export default function Model(props) {
  gltf = props.gltfFile
  let meshArr = props.meshes
  const { nodes, materials } = useGLTF(props.gltfFile)
  const [clicked, setClicked] = useState(false)
  const meshRef = useRef()
  // Using this allows the focussed and hover state to be rendered visible
  const a11y = useA11y()
  return (
    <group {...props} dispose={null} scale={50}>
      {meshArr.map((mesh, index) => {
        return (
          <A11y
            key={index}
            role="togglebutton"
            startPressed={false}
            activationMsg={mesh.A11yMessage}
            deactivationMsg=""
            tabindex="-1"
          >
            <mesh
              key={`containerMesh` + index}
              geometry={nodes[mesh.geometry]["geometry"]}
              material={materials[mesh.material]}
              ref={meshRef}
              onClick={(e) => { 
                e.stopPropagation()
                setClicked(!clicked)}}
            >
                {clicked ? <meshStandardMaterial
                    attach="material"
                    color="purple"
                    // roughness={0.3}
                    // metalness={1.0}
                /> : ""}

              {/* Should have || A11y clicked but not wokring correctly- redcues clickable space to the absolute div that holds the alabels original position */}
              {clicked && (
                <Html distanceFactor={mesh.labelDistance}>
                  <div
                    className="content"
                    tabIndex="-1"
                  >
                    {mesh.labelContent}
                  </div>
                </Html>
              )}

              {mesh.children ?
                mesh.children.map((mesh, index) => {
                  return (
                    <ChildMesh
                      key={`childMesh` + index}
                      index={index}
                      mesh={mesh}
                      geometry={nodes[mesh.geometry]["geometry"]}
                      material={materials[mesh.material]}
                    />
                  )
                })
                : console.log("no children ")}
            </mesh>
          </A11y>
        )
      })}
    </group >
  )
}

useGLTF.preload(gltf)
