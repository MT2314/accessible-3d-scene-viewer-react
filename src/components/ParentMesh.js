/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { A11y, useA11y } from '@react-three/a11y'
import { Html } from '@react-three/drei'
import ChildMesh from './ChildMesh'



let gltf;
export default function ParentMesh(props) {
  let parentProperties = props.mesh
  gltf = props.gltf

  const { nodes, materials } = useGLTF(gltf)
  const [clicked, setClicked] = useState(false)
  const meshRef = useRef()
  // Using this allows the focussed and hover state to be rendered visible
  const a11y = useA11y()
  console.log('parent Mesh', a11y)
  return (
    <>
     {/* <group {...props} dispose={null} scale={50} > */}
      {/* <A11y
        key={props.index}
        role="togglebutton"
        startPressed={false}
        activationMsg={parentProperties.A11yMessage}
        deactivationMsg=""
        tabindex="-1"
      > */}
        <mesh
          key={`containerMesh` + props.index}
          geometry={nodes[parentProperties.geometry]["geometry"]}
          material={materials[parentProperties.material]}
          ref={meshRef}
          onClick={(e) => {
            // e.stopPropagation()
            setClicked(!clicked)

          }}
          onFocus={(e) => { console.log("focus recieved") }}
        >
          {clicked || a11y.focus || a11y.hover || a11y.pressed ? <meshStandardMaterial
            attach="material"
            color={clicked || a11y.pressed ? "purple" : a11y.focus ? "blue" : a11y.hover ? "grey" : "green"}
          /> : ""}

          {/* Should have || A11y pressed but not wokring correctly- redcues clickable space to the absolute div that holds the alabels original position */}
          {clicked && (
            <Html distanceFactor={parentProperties.labelDistance}>
              <div
                className="content"
                tabIndex="-1"
              >
                {parentProperties.labelContent}
              </div>
            </Html>
          )}
        </mesh>
      {/* </A11y> */}
      {parentProperties.children ?
        parentProperties.children.map((mesh, index) => {
          return (
            <A11y
              key={`Ally` + index}
              role="togglebutton"
              startPressed={false}
              activationMsg={mesh.A11yMessage}
              deactivationMsg=""
              tabindex="-1"
            >
              <ChildMesh
                key={`childMesh` + index}
                index={index}
                mesh={mesh}
                geometry={nodes[mesh.geometry]["geometry"]}
                material={materials[mesh.material]}
              />
            </A11y>
          )
        })
        : console.log("no children ")}
</>
    // </group >
  )
}

useGLTF.preload(gltf)
